import Game.Metadata

World "Logo"
Level 13

Title "Oder"

Introduction
"
次をお願いします…
"

/--  -/
Statement (A B : Prop) (h : (A ∧ B) ∨ A) : A := by
  Hint "**ロボ** ほら, 仮定を指で触ると括弧の付け方が表示されるよ。すごいでしょ…

**あなた** ああ, なるほど `({A} ∧ {B}) ∨ {A}` ってことね！

**あなた** この流れにはうんざりしてきたわ：
最初は目標に「かつ」, 次に仮定に「かつ」, その次は目標に「または」, 
そして今度は仮定に「または」… みんなで相談して決めてるみたい！

**ロボ** まあ楽しませてあげようよ。
もうすぐ終わるし, もっと面白い惑星に行けるんだから。

**あなた** じゃあ, また `obtain …` を使うの？

**ロボ** そうだよ。でも今回は `obtain ⟨h₁, h₂⟩ := {h}` じゃなくて `obtain h | h := {h}` だよ"
  obtain h | h := h
  · Hint "**ロボ**
    今度は目標を2回証明する必要がある：
    まず左側 `{A} ∧ {B}` を仮定した場合と, 
    右側 `{A}` を仮定した場合だ。
    ここでは左側が真だと仮定している"
    Hint (hidden := true) " **ロボ** 仮定中の「かつ」の扱い方は
    もう知ってるよね：
    `obtain ⟨h₁, h₂⟩ := {h}`。括弧は `\\<>` で書くんだったね"
    obtain ⟨h₁, _h₂⟩ := h
    assumption
  · Hint (strict := true) "**ロボ** 今度は `({A} ∧ {B}) ∨ {A}` の右側の仮定, 
    つまり `{A}` が真だとした場合の証明だよ"
    assumption

Conclusion
"**あなた** よし, これで彼は満足したみたい。あと1人だけ…
ここまでに学んだLeanのことを簡単にまとめてくれない？

ロボは嬉しそうに輝いた。今までで*初めて*あなたが彼にこんなに頼ってきた。

**ロボ** もちろん, 見ててね！

## 表記法 / 用語

|               | 説明                                                                 |
|:--------------|:---------------------------------------------------------------------|
| *Goal*        | 現在証明すべきこと                                                  |
| *仮定*        | 利用可能なオブジェクトや結果                                        |
| *タクティク*  | 証明中のコマンド。証明ステップに相当                                 |
| `ℕ`           | 自然数の型                                                          |
| `0, 1, 2, …`  | 具体的な自然数                                                      |
| `=`           | 等号                                                               |
| `≠`           | 不等号。`¬(·=·)`の略記                                             |
| `Prop`        | 論理命題の型                                                       |
| `True`        | 無条件に真となる論理命題 `(True : Prop)`                           |
| `False`       | 無条件に偽となる論理命題 `(False : Prop)`                          |
| `¬`           | 論理否定                                                           |
| `∧`           | 論理AND                                                            |
| `∨`           | 論理OR                                                             |
| `(n : ℕ)`     | 自然数                                                              |
| `(A : Prop)`  | 論理命題                                                           |
| `(ha : A)`    | 命題 `(A : Prop)` が真である証明                                   |
| `(h : A ∧ B)` | 仮定で, 名前が `h` と付けられたもの                                |


## タクティク

実際に使う必要のある言葉をまとめて `タクティク` と呼ぶ。
この惑星で使ったタクティクをすべて紹介する：

|    | タクティク                  | 例                                                 |
|:---|:----------------------------|:---------------------------------------------------|
| 1  | `rfl`                       | `A = A` を証明                                    |
| 2  | `assumption`                | Goalを仮定から探す                                |
| 3  | `contradiction`             | 矛盾を探す                                        |
| 4  | `decide`                    | 命題の真偽を判定しようとする                      |
| 5  | `constructor`               | Goal中のANDを分割                                 |
| 6  | `left`/`right`              | Goal中のORの片側を証明                            |
| 7ᵃ | `obtain ⟨h₁, h₂⟩ := h`      | 仮定中のANDを分割                                 |
| 7ᵇ | `obtain h := h \\| h`       | 仮定中のORをケース分け                            |

**あなた** どうしてこんなに詳しいの？

**ロボ** さあね。多分最初から入ってたんだと思う
"

DisabledTactic tauto
